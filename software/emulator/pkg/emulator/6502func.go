package emulator

var functions = []func(*emu6502) string{
	0x00: brk, 0x01: ora_ind_x, 0x05: ora_zp, 0x06: asl_zp,
	0x08: php, 0x09: ora_direct, 0x0a: asl, 0x0d: ora_abs, 0x0e: asl_abs,
	0x10: bpl, 0x11: ora_ind_y, 0x15: ora_zp_x, 0x16: asl_zp_x,
	0x18: clc, 0x19: ora_abs_y, 0x1d: ora_abs_x, 0x1e: asl_abs_x,
	0x20: jsr_abs, 0x21: and_ind_x, 0x24: bit_zp, 0x25: and_zp, 0x26: rol_zp,
	0x28: plp, 0x29: and_direct, 0x2a: rol, 0x2c: bit_abs, 0x2d: and_abs, 0x2e: rol_abs,
	0x30: bmi, 0x31: and_ind_y, 0x35: and_zp_x, 0x36: rol_zp_x,
	0x38: sec, 0x39: and_abs_y, 0x3d: and_abs_x, 0x3e: rol_abs_x,
	0x40: rti, 0x41: eor_ind_x, 0x45: eor_zp, 0x46: lsr_zp,
	0x48: pha, 0x49: eor_direct, 0x4c: jmp_abs, 0x4a: lsr, 0x4d: eor_abs, 0x4e: lsr_abs,
	0x50: bvc, 0x51: eor_ind_y, 0x55: eor_zp_x, 0x56: lsr_zp_x,
	0x58: cli, 0x59: eor_abs_y, 0x5d: eor_abs_x, 0x5e: lsr_abs_x,
	0x60: rts, 0x61: adc_ind_x, 0x65: adc_zp, 0x66: ror_zp,
	0x68: pla, 0x69: adc_direct, 0x6a: ror, 0x6c: jmp_ind, 0x6d: adc_abs, 0x6e: ror_abs,
	0x70: bvs, 0x71: adc_ind_y, 0x75: adc_zp_x, 0x76: ror_zp_x,
	0x78: sei, 0x79: adc_abs_y, 0x7d: adc_abs_x, 0x7e: ror_abs_x,
	0x81: sta_ind_x, 0x84: sty_zp, 0x85: sta_zp, 0x86: stx_zp,
	0x88: dey, 0x8a: txa, 0x8c: sty_abs, 0x8d: sta_abs, 0x8e: stx_abs,
	0x90: bcc, 0x91: sta_ind_y, 0x94: sty_zp_x, 0x95: sta_zp_x, 0x96: stx_zp_y,
	0x98: tya, 0x99: sta_abs_y, 0x9a: txs, 0x9d: sta_abs_x,
	0xa0: ldy_direct, 0xa1: lda_ind_x, 0xa2: ldx_direct, 0xa4: ldy_zp, 0xa5: lda_zp, 0xa6: ldx_zp,
	0xa8: tay, 0xa9: lda_direct, 0xaa: tax, 0xac: ldy_abs, 0xad: lda_abs, 0xae: ldx_abs,
	0xb0: bcs, 0xb1: lda_ind_y, 0xb4: ldy_zp_x, 0xb5: lda_zp_x, 0xb6: ldx_zp_y,
	0xb8: clv, 0xb9: lda_abs_y, 0xba: tsx, 0xbc: ldy_abs_x, 0xbd: lda_abs_x, 0xbe: ldx_abs_y,
	0xc0: cpy_direct, 0xc1: cmp_ind_x, 0xc4: cpy_zp, 0xc5: cmp_zp, 0xc6: dec_zp,
	0xc8: iny, 0xc9: cmp_direct, 0xca: dex, 0xcc: cpy_abs, 0xcd: cmp_abs, 0xce: dec_abs,
	0xd0: bne, 0xd1: cmp_ind_y, 0xd5: cmp_zp_x, 0xd6: dec_zp_x, 0xd9: cmp_abs_y,
	0xd8: cld, 0xdd: cmp_abs_x, 0xde: dec_abs_x,
	0xe0: cpx_direct, 0xe1: sbc_ind_x, 0xe4: cpx_zp, 0xe5: sbc_zp, 0xe6: inc_zp,
	0xe8: inx, 0xe9: sbc_direct, 0xea: nop, 0xec: cpx_abs, 0xed: sbc_abs, 0xee: inc_abs,
	0xf0: beq, 0xf1: sbc_ind_y, 0xf5: sbc_zp_x, 0xf6: inc_zp_x,
	0xf8: sed, 0xf9: sbc_abs_y, 0xfd: sbc_abs_x, 0xfe: inc_abs_x, 0xff: nil,
}

func nop(e *emu6502) string {
	return "           nop"
}

func pha(e *emu6502) string {
	e.push(e.a)
	return "         pha"
}

func pla(e *emu6502) string {
	e.a = e.pop()
	return "         pla"
}

func php(e *emu6502) string {
	e.push(e.getStatus())
	return "         pha"
}

func plp(e *emu6502) string {
	v := e.pop()
	e.setStatus(v)
	return "         plp"
}

func brk(e *emu6502) string {
	e.getMnemonic()
	adr := e.address
	e.push(uint8(adr >> 8))
	e.bf = true
	e.push(uint8(adr & 0x00ff))
	e.push(e.getStatus())
	e.jf = true
	e.address = e.readVector(0xfffe)
	return "         brk"
}
